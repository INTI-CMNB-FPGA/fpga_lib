#!/usr/bin/python
#
# BoardFiles
# Copyright (C) 2015-2017 INTI
# Copyright (C) 2015-2017 Rodrigo A. Melo <rmelo@inti.gob.ar>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse, yaml, os, sys

## Parsing the command line ###################################################

version = 'BoardFiles v1.0'

parser = argparse.ArgumentParser(
   description='Creates Constraints and Top Level HDL files based on a YAML file.'
)

parser.add_argument(
   '-v', '--version',
   action='version',
   version=version
)

parser.add_argument(
   'file',
   metavar='BOARDNAME.yaml',
   help='Input YAML file'
)

parser.add_argument(
   '-o', '--output-dir',
   metavar='PATH',
   default=None,
   help='PATH where to put the resultant files [BOARDNAME]'
)

parser.add_argument(
   '-f', '--format',
   metavar='FORMAT',
   default='vhdl',
   choices=['vhdl','verilog','ucf'],
   help='Format of the output file [vhdl, verilog, ucf]'
)

options = parser.parse_args()

## Processing the options #####################################################

#print options

if os.path.exists(options.file):
   board = yaml.load(open(options.file, 'r'))
else:
   sys.exit('BoardFiles (ERROR): file <' + options.file + '> not exists.')

if options.output_dir is None:
   boardname          = os.path.basename(options.file)
   options.output_dir = os.path.splitext(boardname)[0]

author = None # board['author'] if board['author'] is not None else None
docs   = "" # board['doc']    if board['doc']    is not None else None
notes  = "" # board['note']   if board['note']   is not None else None
pads   = ""

author = board['author'] if 'author' in board else None
docs  += ("\n".join(board['doc'])+"\n") if 'doc' in board else ""
notes += ("\n".join(board['note'])+"\n") if 'note' in board else ""

print (author)
print (docs)
print (notes)

#for data in sorted(board):
#    if data=='author':
#       author=board['author']
#    elif data=='doc':
#       docs+=board['doc']
#    elif data=='note':
#       notes+=board['note']
#    else:
#       pads+="--"+data+"\n"
#       for pad in board[data]:
#           if pad=='doc':
#              docs+=board[data]['doc']
#              pads+="\n".join(board[data]['doc'])+"\n"
#           elif pad=='note':
#              notes+=board[data]['note']
#              pads+="\n".join(board[data]['note'])+"\n"
#           else:
#              pads+=pad+"\n"

#print (docs)
#print (notes)
#print (pads)


#if not os.path.exists(options.output_dir):
#   os.makedirs(options.output_dir)


#fname = options.output_dir + '/' + name + '.vhdl'

#comment = "-- "

#### Creating the package ######################################################

#text = comment + '\n'

#if 'name' in board:
#   text += comment + (board['name'] + '\n')
#else:
#   print ('fpga_pads (INFO): <name> not found.')

#text += comment + '\n'

#if 'doc' in board:
#   for line in board['doc'].splitlines():
#       text += comment + line + '\n'
#   text += comment + '\n'
#else:
#   print ('fpga_pads (INFO): <doc> not found.')

#text += 'package ' + name + ' is\n'

#for group in sorted(board['pads']):
#    text += '   ' + comment + group.upper() + '\n'
#    for pad in sorted(board['pads'][group]):
#        text += '   constant ' + "%-20s"% ('PAD_' + pad.upper()) + \
#                ' : string:="' + board['pads'][group][pad].upper() + '";\n'
#text += 'end package ' + name + ';\n'

### Generating files ###########################################################

#text += comment + 'Generated by ' + version
#open(fname, 'w').write(text)
#print ('fpga_pads (INFO): <' + fname + '> was generated.')
